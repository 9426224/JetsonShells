# 
# Description: nvidia deepstream-l4t 5.0.1 base container
# Size: 631MB
#
ARG BASE_IMAGE=nvcr.io/nvidia/deepstream-l4t:5.0.1-20.09-base
FROM ${BASE_IMAGE}

LABEL maintainer="9426224" \
    version="0.1" \
    description="A l4t-base dockerfile for ROS2 User" \
    email="9426224@live.com"

ENV DEBIAN_FRONTEND=noninteractive

ENV SHELL /bin/bash
SHELL ["/bin/bash", "-c"] 

WORKDIR /tmp

# 
# Description: Change the locale from POSIX to UTF-8
# Size: near by  3.32MB
#
RUN locale-gen en_US en_US.UTF-8 && update-locale LC_ALL=en_US.UTF-8 LANG=en_US.UTF-8
ENV LANG=en_US.UTF-8
ENV PYTHONIOENCODING=utf-8


# 
# Description: Install basic packages
# Size: 11.7MB
#
RUN apt-get update && \
    apt-get install -y --no-install-recommends \
        curl \
        wget \
        gnupg2 \
        lsb-release \
        ca-certificates && \
    rm -rf /var/lib/apt/lists/* && \
    apt-get clean && \
    rm -rf /tmp/*


# 
# Description: Install used packages
# Size: 213MB
#
RUN apt-get update && \
    apt-get install -y --no-install-recommends \
        build-essential \
        git \
        apt-utils \
        usbutils \
        iputils-ping \
        gdb \
        libtool \
        autoconf \
        automake && \
    rm -rf /var/lib/apt/lists/* && \
    apt-get clean && \
    rm -rf /tmp/*


# 
# Description: Add ROS repo
# Size: 10.3KB
#
RUN curl -sSL https://raw.githubusercontent.com/ros/rosdistro/master/ros.key -o /usr/share/keyrings/ros-archive-keyring.gpg && \
    echo "deb [arch=$(dpkg --print-architecture) signed-by=/usr/share/keyrings/ros-archive-keyring.gpg] http://packages.ros.org/ros2/ubuntu $(lsb_release -cs) main" | tee /etc/apt/sources.list.d/ros2.list > /dev/null


# 
# Description: Build CMake 3.20.5
# Size: 120MB
#
RUN wget --quiet --show-progress --progress=bar:force:noscroll --no-check-certificate  \
        https://github.com/Kitware/CMake/releases/download/v3.20.5/cmake-3.20.5-linux-aarch64.tar.gz &&\
    tar -zxvf ./cmake-3.20.5-linux-aarch64.tar.gz -C /usr/local/share/ && \
    ln -s /usr/local/share/cmake-3.20.5-linux-aarch64/bin/cmake /usr/bin/cmake && \
    ln -s /usr/local/share/cmake-3.20.5-linux-aarch64/bin/cmake /usr/local/bin/cmake && \
    rm -rf /tmp/*


# 
# Description: Install OpenCV 4.5.0 with CUDA
# Size: 477MB
#
RUN apt-get purge -y '*opencv*' || echo "previous OpenCV installation not found" && \
    mkdir opencv && \
    cd opencv && \
    wget --quiet --show-progress --progress=bar:force:noscroll --no-check-certificate https://nvidia.box.com/shared/static/5v89u6g5rb62fpz4lh0rz531ajo2t5ef.gz -O OpenCV-4.5.0-aarch64.tar.gz && \
    tar -xzvf OpenCV-4.5.0-aarch64.tar.gz && \
    dpkg -i --force-depends *.deb && \
    apt-get update && \
    apt-get install -y -f --no-install-recommends && \
    dpkg -i *.deb && \
    rm -rf /var/lib/apt/lists/* && \
    apt-get clean && \
    rm -rf /tmp/* && \
    cp -r /usr/include/opencv4 /usr/local/include/opencv4 && \
    cp -r /usr/lib/python3.6/dist-packages/cv2 /usr/local/lib/python3.6/dist-packages/cv2


# 
# Description: Install yaml-cpp and jsoncpp
# Size: 6.04MB
#
RUN git clone --branch yaml-cpp-0.7.0 https://github.com/jbeder/yaml-cpp yaml-cpp-0.7 && \
    cd yaml-cpp-0.7 && \
    mkdir build && \
    cd build && \
    cmake -DBUILD_SHARED_LIBS=ON .. && \
    make -j$(nproc) && \
    make -j$(nproc) install && \ 
    git clone --branch 1.9.5 https://github.com/open-source-parsers/jsoncpp.git && \
    cd jsoncpp && \
    mkdir build && \
    cd build && \
    cmake .. && \
    make -j$(nproc) && \
    make -j$(nproc) install && \ 
    rm -rf /tmp/*

# 
# Description: Install ROS2 install link packages
# Size: 173MB
#
RUN apt-get update && \
    apt-get install -y --no-install-recommends \
        libpython3-dev \
        python3-colcon-common-extensions \ 
        python3-pip \
        python3-numpy \
        python3-rosdep \
        python3-setuptools \
        python3-vcstool \
        python3-rosinstall-generator \
        libtinyxml2-dev && \
    rm -rf /var/lib/apt/lists/* && \
    apt-get clean && \
    rm -rf /tmp/*


# 
# Description: Install ROS2 Required packages
# Size: 516MB
#
RUN apt-get update && \
    apt-get install -y --no-install-recommends \
        libeigen3-dev \
        libconsole-bridge-dev \
        libzstd-dev \
        python3-autobahn \
        python3-tornado \
        python3-twisted \
        libogg-dev \
        libtheora-dev \
        pydocstyle \
        libspdlog-dev \
        python3-lark-parser \
        libboost-dev \
        libboost-python-dev \
        libboost-python1.65.1 \
        libcppunit-dev \
        libsqlite3-dev \
        python3-lxml \
        libtinyxml-dev \
        libbenchmark-dev \
        ffmpeg \
        libavcodec-dev \
        libavformat-dev \
        libavutil-dev \
        libswscale-dev \
        uncrustify \
        cppcheck \
        acl \
        libacl1-dev \
        python3-flake8 \
        libbullet-dev \
        python3-websocket \
        libssl-dev \
        libboost-all-dev \
        libgtest-dev \
        python3-bson \
        libasio-dev \
        python3-ifcfg \
        python3-pytest-mock \
        python3-mypy \
        libxml2-utils \
        python3-mock \
        libcunit1-dev \
        bison \
        libyaml-dev \
        graphviz \
        rti-connext-dds-5.3.1 \
        python3-netifaces \
        python3-packaging \
        google-mock && \
    pip3 install --upgrade pip && \
    python3 -m pip install --no-cache-dir -U \
        importlib-resources \
        importlib-metadata && \
    rm -rf ~/.cache/pip && \
    rm -rf /var/lib/apt/lists/* && \
    apt-get clean && \
    rm -rf /tmp/*

# # 
# # Description: Install ROS2 Galactic (Build from Ubuntu 18.04 Source)
# # Size: 237MB
# #
RUN mkdir -p /opt/ros/galactic/src && \
    cd /opt/ros/galactic && \
    rosinstall_generator --deps --rosdistro galactic ros_base \
        launch_xml \
        launch_yaml \
        launch_testing \
        launch_testing_ament_cmake \
        example_interfaces \
        cv_bridge \
        v4l2_camera \
        vision_opencv \
        vision_msgs \
        image_transport \
        compressed_image_transport \
        compressed_depth_image_transport \
        image_transport_plugins \
        rosbridge_suite \
        async_web_server_cpp \
    > ros2.galactic.ros_base.rosinstall && \
    cat ros2.galactic.ros_base.rosinstall && \
    vcs import src < ros2.galactic.ros_base.rosinstall && \
    cd /opt/ros/galactic/src && git clone --branch ros2 https://github.com/RobotWebTools/web_video_server.git && \
    cd web_video_server && sed -i '3i set(CUDA_TOOLKIT_ROOT_DIR /usr/local/cuda)' ./CMakeLists.txt && \
    cd /opt/ros/galactic/src/async_web_server_cpp && sed -i 's/@Boost_VERSION@/1.65/g' ./find_dependencies.cmake.in && \
    cd /opt/ros/galactic && \
    apt-get update && \
    rosdep init && \
    rosdep update && \
    rosdep install -y \
        --ignore-src \
        --from-paths src \
        --rosdistro galactic \
        --skip-keys "libopencv-dev libopencv-contrib-dev libopencv-imgproc-dev python-opencv python3-opencv" && \
    colcon build --merge-install && \
    rm -rf /opt/ros/galactic/src && \
    rm -rf /opt/ros/galactic/log && \
    rm -rf /opt/ros/galactic/build && \
    rm /opt/ros/galactic/*.rosinstall && \
    rm -rf /var/lib/apt/lists/* && \
    apt-get clean && \
    rm -rf /tmp/*
ENV RMW_IMPLEMENTATION=rmw_cyclonedds_cpp


# 
# Description: Add Node.js and MongoDB
# Size: 134MB
#
RUN wget --quiet --show-progress --progress=bar:force:noscroll --no-check-certificate \ 
        https://nodejs.org/dist/v14.17.5/node-v14.17.5-linux-arm64.tar.xz && \
    tar -xvf node-v14.17.5-linux-arm64.tar.xz && \
    mv node-v14.17.5-linux-arm64 /opt/node && \
    ln -s /opt/node/bin/node /usr/local/bin/node && \
    ln -s /opt/node/bin/npm /usr/local/bin/npm && \
    npm install -g pm2 && \
    ln -s /opt/node/bin/pm2 /usr/local/bin/ && \
    rm -rf /tmp/*


# 
# Description: Install LibTorch 1.7.0
# Size: 620MB
#
RUN wget --quiet --show-progress --progress=bar:force:noscroll --no-check-certificate \
        https://nvidia.box.com/shared/static/cs3xn3td6sfgtene6jdvsxlr366m2dhq.whl -O torch-1.7.0-cp36-cp36m-linux_aarch64.whl && \
    pip3 install --no-cache-dir torch-1.7.0-cp36-cp36m-linux_aarch64.whl && \
    rm -rf ~/.cache/pip && \
    rm -rf /tmp/*


# 
# Description: Install Development packages
# Size: 144MB
#
RUN apt-get update && \
    apt-get install -y --no-install-recommends \
        build-essential \
        git \
        openssh-server \
        vim \
        apt-utils \
        unzip \
        tmux \
        python3-matplotlib \
        python3-numba \
        libcurl4-openssl-dev \
        python3-llvmlite \
        libgstreamer1.0-dev \
        libgstreamer-plugins-base1.0-dev \
        libssl1.0.0 \
        libgstreamer1.0-0 \
        gstreamer1.0-tools \
        gstreamer1.0-plugins-good \
        gstreamer1.0-plugins-bad \
        gstreamer1.0-plugins-ugly \
        gstreamer1.0-libav \
        libgstrtspserver-1.0-0 \
        libjansson4 \
        libx11-dev \
        x11-apps \
        xorg \
        meson \
        libfreetype6-dev \
        tcl-dev \
        tk-dev \
        python3-tk \
        protobuf-compiler \
        libprotoc-dev && \
    rm -rf /var/lib/apt/lists/* && \
    apt-get clean && \
    rm -rf /tmp/*


# 
# Description: Install Python Environment
# Size: 441MB
#
RUN pip3 install --upgrade pip && \
    python3 -m pip install --no-cache-dir -U \
        wheel \
        setuptools \
        numpy==1.19.3 && \
    python3 -m pip install --no-cache-dir -U \
        argcomplete \  
        pyzmq \
        filterpy==1.4.5 \
        scikit-learn==0.24.2 \
        scikit-image==0.17.2 \
        scipy==1.5.4 \
        pandas \
        pillow \
        flake8-blind-except \
        flake8-builtins \
        flake8-class-newline \
        flake8-comprehensions \
        flake8-deprecated \
        flake8-docstrings \
        flake8-import-order \
        flake8-quotes \
        pytest-repeat \
        pytest-rerunfailures \
        pytest \
        pycuda==2019.1.2 \
        onnx==1.4.1 && \
    rm -rf /tmp/* && \
    rm -rf ~/.cache/pip


# 
# Description: Link CUDART to ENV
# Size: 925B
#
RUN ln -s /usr/local/cuda-10.2/targets/aarch64-linux/lib/libcudart.so.10.2 /usr/lib/aarch64-linux-gnu/ && \
    ln -s /usr/local/cuda-10.2/targets/aarch64-linux/lib/libnvrtc.so.10.2 /usr/lib/aarch64-linux-gnu/ && \
    ln -s /usr/local/cuda-10.2/targets/aarch64-linux/lib/libnvrtc-builtins.so.10.2 /usr/lib/aarch64-linux-gnu/ && \
    ln -s /usr/local/cuda-10.2/targets/aarch64-linux/lib/libcurand.so.10 /usr/lib/aarch64-linux-gnu/ && \
    ln -s /usr/local/cuda-10.2/targets/aarch64-linux/lib/libcufft.so.10 /usr/lib/aarch64-linux-gnu/ && \
    ln -s /usr/local/cuda-10.2/targets/aarch64-linux/lib/libcufftw.so.10 /usr/lib/aarch64-linux-gnu/ && \
    ln -s /usr/local/cuda-10.2/targets/aarch64-linux/lib/libcuing64.so.10.2 /usr/lib/aarch64-linux-gnu/ && \
    ln -s /usr/local/cuda-10.2/targets/aarch64-linux/lib/libcupti.so.10.2 /usr/lib/aarch64-linux-gnu/ && \
    ln -s /usr/local/cuda-10.2/targets/aarch64-linux/lib/libcusolver.so.10 /usr/lib/aarch64-linux-gnu/ && \
    ln -s /usr/local/cuda-10.2/targets/aarch64-linux/lib/libcusparse.so.10 /usr/lib/aarch64-linux-gnu/ && \
    ln -s /usr/local/cuda-10.2/targets/aarch64-linux/lib/libnvperf_host.so /usr/lib/aarch64-linux-gnu/ && \
    ln -s /usr/local/cuda-10.2/targets/aarch64-linux/lib/libnvgraph.so.10 /usr/lib/aarch64-linux-gnu/ && \
    ln -s /usr/local/cuda-10.2/targets/aarch64-linux/lib/libnvperf_target.so /usr/lib/aarch64-linux-gnu/ && \
    ln -s /usr/local/cuda-10.2/targets/aarch64-linux/lib/libnvToolsExt.so /usr/lib/aarch64-linux-gnu/ && \
    ln -s $(which nvcc) /sbin/nvcc 


# 
# Description: Install Code-Server
# Size: 286MB
#
RUN wget  --quiet --show-progress --progress=bar:force:noscroll --no-check-certificate \ 
    https://github.com/cdr/code-server/releases/download/v3.11.1/code-server-3.11.1-linux-arm64.tar.gz && \
    tar -zxvf code-server-3.11.1-linux-arm64.tar.gz && \
    mv code-server-3.11.1-linux-arm64 ~/code-server && \
    rm -rf /tmp/*


ARG buildtag
WORKDIR /root
RUN echo -n $buildtag >> build-tag


WORKDIR /tmp
# 
# Description: Add pull_all_repo.sh.
# Size: 6.8KB
#
RUN echo $'#!/bin/bash\n \
source /opt/ros/galactic/install/setup.bash\n \
mkdir -p ~/ros2_ws/src\n \
cd ~/ros2_ws/src\n \
git clone --branch ros-galactic https://sw9426224:f86815ba0c0befb27143581b592c1955@gitee.com/bitcq/bitcq_msg.git\n \
git clone --branch ros-galactic https://sw9426224:f86815ba0c0befb27143581b592c1955@gitee.com/bitcq/radar.git\n \
git clone --branch ros-galactic https://sw9426224:f86815ba0c0befb27143581b592c1955@gitee.com/bitcq/tiandy_camera.git\n \
git clone --branch ros-galactic https://sw9426224:f86815ba0c0befb27143581b592c1955@gitee.com/bitcq/sort_track.git\n \
git clone --branch ros-galactic https://sw9426224:f86815ba0c0befb27143581b592c1955@gitee.com/bitcq/traffic_count.git\n \
git clone --branch ros-galactic https://sw9426224:f86815ba0c0befb27143581b592c1955@gitee.com/bitcq/yolov4_trt.git\n \
git clone --branch ros-galactic https://sw9426224:f86815ba0c0befb27143581b592c1955@gitee.com/bitcq/camera_radar_publisher.git\n \
git clone --branch ros-galactic https://sw9426224:f86815ba0c0befb27143581b592c1955@gitee.com/bitcq/bitcq_camera.git\n \
git clone --branch ros-galactic https://sw9426224:f86815ba0c0befb27143581b592c1955@gitee.com/bitcq/demo_view.git\n \
git clone --branch ros-galactic https://sw9426224:f86815ba0c0befb27143581b592c1955@gitee.com/bitcq/sensor_fusion.git\n \
cd ~/ros2_ws\n \
colcon build --packages-select bitcq_msg\n \
source install/setup.bash\n \
colcon build\n \
cd src/tiandy_camera/clean_script/ && \
chmod +x ./install.sh ./build.sh && \
./install.sh && \
cd ~/\n \
git clone --branch ros-galactic https://sw9426224:f86815ba0c0befb27143581b592c1955@gitee.com/bitcq/ecu_web.git\n \
cd ecu_web\n \
chmod +x build.sh\n \
sudo ./build.sh\n \
mv ecuNodeServer /home\n \
rm -rf ~/ecu_web\n \
cd /home/ecuNodeServer\n \
chmod +x /home/ecuNodeServer/server/start.sh\n \
rm -f ~/pull_all_repo.sh\n \
source /root/ros2_ws/install/setup.bash\n \
/home/ecuNodeServer/server/start.sh' > /root/pull_all_repo.sh && \
    echo $'#!/bin/bash\n \
/usr/bin/clean_script >/dev/null 2>&1 &' > /root/start_clean_script.sh && \
    chmod +x /root/pull_all_repo.sh && \
    chmod +x /root/start_clean_script.sh && \
    mkdir /root/sample

COPY ./docker-release-pack/sample/libcjson.so.1.7.14 /root/sample
COPY ./docker-release-pack/sample/libcqbit_target2mas.a /root/sample
COPY ./docker-release-pack/sample/libcqbit_target2mas.so /root/sample
COPY ./fastrtps.xml /root/

RUN ln -s /root/sample/libcjson.so.1.7.14 /root/sample/libcjson.so.1 && \
    ln -s /root/sample/libcjson.so.1 /root/sample/libcjson.so && \
    chmod +x /root/sample/*

# 
# Description: Add EntryPoint and .bashrc\SSH params.
# Size: 6.8KB
#
RUN echo $'#!/bin/bash\n \
    set -e\n \
    echo "root:$rootpwd" | chpasswd\n \
    /etc/init.d/ssh start\n \
    export PASSWORD=$cspwd\n \
    echo port=${sshport} >> /etc/ssh/sshd_config\n \
    /etc/init.d/ssh restart\n \
    nohup /root/code-server/code-server --port $csport --auth password --host 0.0.0.0 >& /root/code-server/run.log &\n \
    echo -e export\tDISPLAY=$DISPLAY >> /root/.bashrc\n \
    exec "$@"' > /ros_entrypoint.sh && \
    chmod +x /ros_entrypoint.sh && \
    echo $'export XAUTHORITY=/tmp/.XAuthority\nsource /opt/ros/galactic/install/setup.bash\nsource ~/ros2_ws/install/setup.bash\nexport LD_LIBRARY_PATH=/root/sample/:$LD_LIBRARY_PATH' >> /root/.bashrc && \
    echo $'PermitRootLogin yes\nPubkeyAuthentication yes\nAllowTcpForwarding yes\nX11DisplayOffset 10\nX11UseLocalhost yes' >> /etc/ssh/sshd_config && \
    echo $'export RMW_IMPLEMENTATION=rmw_fastrtps_cpp\nexport RMW_FASTRTPS_USE_QOS_FROM_XML=1\nexport FASTRTPS_DEFAULT_PROFILES_FILE=/root/fastrtps.xml\nexport OPENBLAS_NUM_THREADS=1' >> /root/.bashrc


# 
# Description: Install BITCQ ROS2 Packages
# Size: near by 150KB
#
RUN mkdir -p ~/ros2_ws/src


ENTRYPOINT ["/ros_entrypoint.sh"]
CMD ["bash"]
WORKDIR /root/